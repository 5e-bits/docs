"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[1358],{75693:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>i,toc:()=>d});var t=s(74848),l=s(28453),a=s(19303);const r={},o="Creating a Spell Card Library with React",i={id:"tutorials/advanced/react-spell-cards",title:"Creating a Spell Card Library with React",description:"This tutorial assumes you have basic knowledge of CSS, React and JavaScript. Specifically,",source:"@site/docs/tutorials/advanced/react-spell-cards.mdx",sourceDirName:"tutorials/advanced",slug:"/tutorials/advanced/react-spell-cards",permalink:"/docs/tutorials/advanced/react-spell-cards",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialsSidebar",previous:{title:"Interactive Monster Search with JavaScript",permalink:"/docs/tutorials/advanced/monster-search-with-javascript"},next:{title:"Command Line Spellbook with Python",permalink:"/docs/tutorials/advanced/terminal-spellbook-with-python"}},c={},d=[{value:"Setting Up the Project",id:"setting-up-the-project",level:2},{value:"Making your Project on CodeSandbox",id:"making-your-project-on-codesandbox",level:3},{value:"Adding some Code",id:"adding-some-code",level:3},{value:"Setting up our Data",id:"setting-up-our-data",level:2},{value:"Rendering our Spell Cards",id:"rendering-our-spell-cards",level:2},{value:"Bonus",id:"bonus",level:2}];function p(e){const n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",mermaid:"mermaid",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,l.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"creating-a-spell-card-library-with-react",children:"Creating a Spell Card Library with React"}),"\n",(0,t.jsx)(n.p,{children:"This tutorial assumes you have basic knowledge of CSS, React and JavaScript. Specifically,"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://react.dev/learn/writing-markup-with-jsx",children:"How to write JSX"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://javascript.info/async-await",children:"How to make and call asynchronous functions"})}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"You can brush up your knowledge on these subjects using the links provided and then drop back in!"}),"\n",(0,t.jsx)(n.p,{children:"By the end of this tutorial we'll have a web application that lists every spell in the game. We can use this as a jumping-off point for whatever our hearts desire!"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Add filters to only show spells of specific levels"}),"\n",(0,t.jsx)(n.li,{children:"Add a shuffle button that picks a random spell"}),"\n",(0,t.jsx)(n.li,{children:"Add a search bar that searches through spell names & descriptions"}),"\n"]}),"\n",(0,t.jsx)(a.A,{objectives:["Learn to interact with the API using HTTP requests in JavaScript","Learn to create reusable React components"]}),"\n",(0,t.jsx)(n.h2,{id:"setting-up-the-project",children:"Setting Up the Project"}),"\n",(0,t.jsxs)(n.p,{children:["We'll be using ",(0,t.jsx)(n.a,{href:"https://codesandbox.io",children:"CodeSandbox"})," for this project because it gives us a quick starting point for our React code. Anything you write in your CodeSandbox project should be easily transportable to whatever React project you want to build."]}),"\n",(0,t.jsx)(n.h3,{id:"making-your-project-on-codesandbox",children:"Making your Project on CodeSandbox"}),"\n",(0,t.jsxs)(n.p,{children:["We'll be creating a new ",(0,t.jsx)(n.strong,{children:"React"})," project. If you feel comfortable with TypeScript you can use the ",(0,t.jsx)(n.strong,{children:"React TypeScript"})," project just as well."]}),"\n",(0,t.jsx)(n.mermaid,{value:"flowchart LR\n    1[New sandbox]--\x3e\n    2[Start from a template]--\x3e\n    3[React]"}),"\n",(0,t.jsx)(n.h3,{id:"adding-some-code",children:"Adding some Code"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Setup an api file to help make fetching from the D&D 5e API easier."}),' This keeps our api code in one place and lets us easily extend it if we want to add more endpoints. Click on the "New File" button next to the ',(0,t.jsx)(n.code,{children:"src"})," folder in your CodeSandbox sidebar and make a new file called ",(0,t.jsx)(n.code,{children:"api.js"}),":"]}),"\n",(0,t.jsxs)(n.p,{children:["We can get all the spells in the 5e D&D API by making a request to ",(0,t.jsx)(n.code,{children:"https://www.dnd5eapi.co/api/spells"}),". Let's go ahead and save that base url to a variable so we don't have to retype it in the future."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",metastring:'title="/src/api.js"',children:'const BASE_URL = "https://www.dnd5eapi.co";\n\nexport async function getAllSpells() {\n  return fetch(BASE_URL + "/api/spells").then((response) => response.json());\n}\n'})}),"\n",(0,t.jsx)(n.p,{children:"If we run this function that we're exporting, we get a response of the following shape:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:'{\n  count: 319,\n  results: [\n    {\n      index: "acid-arrow",\n      level: 2,\n      name: "Acid Arrow",\n      url: "/api/spells/acid-arrow"\n    },\n      // ...\n  ]\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"setting-up-our-data",children:"Setting up our Data"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"index"})," is the unique id of this spell, ",(0,t.jsx)(n.code,{children:"name"})," is a formatted string we can show our users, and ",(0,t.jsx)(n.code,{children:"url"})," is a path to the spell in the API."]}),"\n",(0,t.jsx)(n.p,{children:"Since we're going to want all of the spell data in our app, let's tweak that function a bit to actually pull the full spells down:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",metastring:'title="/src/api.js"',children:'const BASE_URL = "https://www.dnd5eapi.co";\n\nexport async function getAllSpells() {\n  const spellIndexes = await fetch(BASE_URL + "/api/spells").then((response) =>\n    response.json()\n  );\n  return Promise.all(\n    spellIndexes.results.map((index) =>\n      fetch(BASE_URL + index.url).then((response) => response.json())\n    )\n  );\n}\n'})}),"\n",(0,t.jsx)(n.p,{children:"This might lag, but we'll figure that out later."}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:'"Make it work, make it right, make it fast"'}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["If we run the function now, we'll get a lot more information from our spells. We mostly care about ",(0,t.jsx)(n.code,{children:"name"}),", ",(0,t.jsx)(n.code,{children:"level"}),", and ",(0,t.jsx)(n.code,{children:"desc"})," for now but you can see everything the endpoint gives you ",(0,t.jsx)(n.a,{href:"/docs/api/get-a-spell-by-index",children:"in the API reference"})]}),"\n",(0,t.jsx)(n.h2,{id:"rendering-our-spell-cards",children:"Rendering our Spell Cards"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"App.jsx"})," is where the bulk of our code will be. We have to load the spells when we mount the component, and then loop through our spells and render each one."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-jsx",metastring:'title="/src/App.jsx"',children:'import { useEffect, useState } from "react";\nimport { getAllSpells } from "./api";\nimport "./styles.css";\n\nexport default function App() {\n  const [spells, setSpells] = useState([]);\n\n  useEffect(() => {\n    getAllSpells().then(setSpells);\n  }, []);\n\n  return (\n    <div className="App">\n      <ul>\n        {spells.map((spell) => (\n          <li key={spell.index}>{spell.name}</li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n'})}),"\n",(0,t.jsx)(n.p,{children:"Alright! Now our app shows a bulleted list of spells. This is a great start, but we can make it look better. First, let's create a SpellCard component and pull out some more info that we want from the spell object:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-jsx",metastring:'title="/src/SpellCard.jsx"',children:'export default function SpellCard({ spell }) {\n  return (\n    <li className="spell-card">\n      <hgroup>\n        <h4>{spell.name}</h4>\n        <small>\n          {spell.level > 0 && `Level ${spell.level} `}\n          {spell.school.name}\n          {spell.level === 0 && " cantrip"}\n        </small>\n      </hgroup>\n      <div className="stats">\n        <p>\n          <strong>Casting Time</strong>\n          {spell.casting_time}\n        </p>\n        <p>\n          <strong>Range</strong>\n          {spell.range}\n        </p>\n        <p>\n          <strong>Components</strong>\n          {spell.components.join(", ")}\n        </p>\n        <p>\n          <strong>Duration</strong>\n          {spell.duration}\n        </p>\n      </div>\n    </li>\n  );\n}\n'})}),"\n",(0,t.jsx)(n.p,{children:"Now that we have our separate component, we need to pull it into our App.jsx:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-jsx",metastring:'title="/src/App.jsx"',children:'import { useEffect, useState } from "react";\nimport { getAllSpells } from "./api";\nimport SpellCard from "./SpellCard";\nimport "./styles.css";\n\nexport default function App() {\n  const [spells, setSpells] = useState([]);\n\n  useEffect(() => {\n    getAllSpells().then(setSpells);\n  }, []);\n\n  return (\n    <div className="App">\n      <ul className="spell-list">\n        {spells.map((spell) => (\n          <SpellCard key={spell.index} spell={spell} />\n        ))}\n      </ul>\n    </div>\n  );\n}\n'})}),"\n",(0,t.jsx)(n.p,{children:"And now that we have some more details displaying, let's hop into the styles and organize it a bit better"}),"\n",(0,t.jsx)("iframe",{src:"https://codesandbox.io/embed/d-d-5e-spell-cards-jsvnct?fontsize=14&hidenavigation=1&module=%2Fsrc%2Fstyles.css&theme=dark",style:{width:"100%",height:"500px",border:0,borderRadius:"4px",overflow:"hidden"},title:"D&D 5e Spell Cards",allow:"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking",sandbox:"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts"}),"\n",(0,t.jsxs)(n.p,{children:["Looking good! We can review ",(0,t.jsx)(n.a,{href:"https://codesandbox.io/s/d-d-5e-spell-cards-jsvnct",children:"the entire project"})," and see how all our code came together in the end!"]}),"\n",(0,t.jsx)(n.h2,{id:"bonus",children:"Bonus"}),"\n",(0,t.jsx)(n.p,{children:"Depending on our connection, these cards could take a hot minute to load! Let's add a loading indicator and make sure we're caching the request so subsequent visits can be faster."}),"\n",(0,t.jsxs)(n.p,{children:["There are plenty of libraries that can help with this like ",(0,t.jsx)(n.a,{href:"https://tanstack.com/query/v3",children:"Reacy Query"})," but we'll just do it manually."]}),"\n",(0,t.jsx)(n.p,{children:"First, we'll add an indicator that we're loading. Let's just keep it plain text for now..."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-jsx",metastring:'title="/src/App.jsx"',children:'return (\n  <div className="App">\n    {spells.length === 0 && <span className="loading">Loading...</span>}\n    <ul className="spell-list">\n      {spells.map((spell) => (\n        <SpellCard key={spell.index} spell={spell} />\n      ))}\n    </ul>\n  </div>\n);\n'})}),"\n",(0,t.jsxs)(n.p,{children:["And then we'll modify our useEffect to use ",(0,t.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage",children:"localStorage"})," to save our spells and load them if available:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-jsx",metastring:'title="/src/App.jsx"',children:'useEffect(() => {\n  const savedSpells = localStorage.getItem("spells");\n  if (savedSpells) setSpells(JSON.parse(savedSpells));\n  getAllSpells().then((spells) => {\n    setSpells(spells);\n    localStorage.setItem("spells", JSON.stringify(spells));\n  });\n}, []);\n'})}),"\n",(0,t.jsx)(n.p,{children:"And boom! Now the page will render our saved list and then update with the new list (and save that one) just in case there are any changes."})]})}function h(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(p,{...e})}):p(e)}},19303:(e,n,s)=>{s.d(n,{A:()=>l});s(96540);var t=s(74848);function l(e){let{children:n,objectives:s}=e;return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)("h2",{children:"\u2705 Learning Objectives"}),(0,t.jsx)("ol",{children:s.map(((e,n)=>(0,t.jsx)("li",{children:e},n)))}),(0,t.jsx)("div",{children:n})]})}},28453:(e,n,s)=>{s.d(n,{R:()=>r,x:()=>o});var t=s(96540);const l={},a=t.createContext(l);function r(e){const n=t.useContext(a);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:r(e.components),t.createElement(a.Provider,{value:n},e.children)}}}]);